[{"/Users/karirodrigu0/Desktop/RubiksCube/rubcube-app/src/index.js":"1","/Users/karirodrigu0/Desktop/RubiksCube/rubcube-app/src/App.js":"2","/Users/karirodrigu0/Desktop/RubiksCube/rubcube-app/src/reportWebVitals.js":"3","/Users/karirodrigu0/Desktop/RubiksCube/rubcube-app/src/store/reducers/index.js":"4","/Users/karirodrigu0/Desktop/RubiksCube/rubcube-app/src/store/actions/generalActions.js":"5","/Users/karirodrigu0/Desktop/RubiksCube/rubcube-app/src/components/Home.js":"6","/Users/karirodrigu0/Desktop/RubiksCube/rubcube-app/src/components/Cube.js":"7","/Users/karirodrigu0/Desktop/RubiksCube/rubcube-app/src/components/CubeDetails.js":"8"},{"size":935,"mtime":1621458145830,"results":"9","hashOfConfig":"10"},{"size":339,"mtime":1613526425227,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1613526425229,"results":"12","hashOfConfig":"10"},{"size":936,"mtime":1621549816513,"results":"13","hashOfConfig":"10"},{"size":608,"mtime":1613526425229,"results":"14","hashOfConfig":"10"},{"size":416,"mtime":1621212300790,"results":"15","hashOfConfig":"10"},{"size":4630,"mtime":1621547221083,"results":"16","hashOfConfig":"10"},{"size":1576,"mtime":1618812412819,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"15yvgv7",{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"26","messages":"27","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"23"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"23"},"/Users/karirodrigu0/Desktop/RubiksCube/rubcube-app/src/index.js",[],"/Users/karirodrigu0/Desktop/RubiksCube/rubcube-app/src/App.js",["38"],"import logo from './logo.svg';\nimport './App.css';\nimport Home from './components/Home'\nimport { Route, Switch } from 'react-router-dom'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route exact path=\"/\">\n          <Home />\n        </Route>\n        \n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n",["39","40"],"/Users/karirodrigu0/Desktop/RubiksCube/rubcube-app/src/reportWebVitals.js",[],"/Users/karirodrigu0/Desktop/RubiksCube/rubcube-app/src/store/reducers/index.js",["41"],"/Users/karirodrigu0/Desktop/RubiksCube/rubcube-app/src/store/actions/generalActions.js",[],"/Users/karirodrigu0/Desktop/RubiksCube/rubcube-app/src/components/Home.js",["42","43"],"/Users/karirodrigu0/Desktop/RubiksCube/rubcube-app/src/components/Cube.js",["44","45"],"import React, {useState} from 'react'\nimport CubeDetails from './CubeDetails.js'\nimport { connect } from 'react-redux'\n/*\nI have to build a 3D object with three axis\nHow can I build this: \n    1. Build x, y, z axes\n        a. create 2D representation\n    2. Add three 2D squares to each axis\n    \nBuild the logic to make moves and the actual move options\nHow will I do this:\n    1. Create buttons that allow the user to choose between:\n        a. 18 possible moves possible moves\n            i. Three dimensions * three rows * two ways to move = 18\n                a. change color of all two dimensional squares for each move\n                    1. create algorithm that changes multiple squares' colors according to move\n                        a. store each side's current colors in state - do this by creating six arrays (six sides) with 9 squares (3 by 3)\n*/\n\nconst Cube = () => {\n    const [sideArray, setSideArray] = useState(null)\n\n    return(\n        <div id=\"cubeVisualization\" >\n            \n            <h2> Rubik's Cube </h2>\n            \n            <div id=\"cubeSide1AndVisualizationBox\" style={{ paddingLeft: \"44.5%\", position:'fixed', marginTop: '100px'}}>\n                <CubeDetails/>   \n            \n                <div id=\"cubeSide2\" style={{ paddingLeft: \"44.5%\", transform: `skew(-70deg, 0deg) scale(1, 0.25) translateX(-680px) translateY(-970px) `}}>\n                    <CubeDetails/> \n                </div>\n\n                <div id=\"cubeSide3\" style={{ paddingLeft: \"44.5%\", transform: `skew(0deg, -20deg)  scale(0.75, 1) translateX(100px) translateY(-273px)`}}>\n                    <CubeDetails/> \n                </div>\n                \n                <div id=\"cubeSide4\" style={{transform: 'translate(500px, -450px)'}}>\n                    <CubeDetails/> \n                </div>\n\n                <div id=\"cubeSide5\" style={{transform: 'translate(-400px, -600px)'}}>\n                    <CubeDetails/> \n                </div>\n\n                <div id=\"cubeSide6\" style={{transform: 'translate(20px, -500px)'}}>\n                    <CubeDetails/> \n                </div>\n\n\n            </div>\n\n            <div id=\"movesButtons\">\n                    <button id= 'LA-button' >\n                        LA   \n                    </button> \n\n                    <button id= 'LT-button' >\n                        LT  \n                    </button> \n\n                    <button id= 'RA-button' >\n                        RA   \n                    </button> \n\n                    <button id= 'RT-button' >\n                        RT   \n                    </button> \n\n                    <button id= 'UA-button' >\n                        UA  \n                    </button> \n\n                    <button id= 'UT-button' >\n                        UT   \n                    </button> \n\n                    <button id= 'DA-button' >\n                        DA   \n                    </button> \n\n                    <button id= 'DT-button' >\n                        DT   \n                    </button> \n\n                    <button id= 'FA-button' >\n                        FA   \n                    </button> \n\n                    <button id= 'FT-button' >\n                        FT   \n                    </button> \n\n                    <button id= 'BA-button' >\n                        BA   \n                    </button> \n\n                    <button id= 'BT-button' >\n                        BT   \n                    </button> \n\n                    <button id= 'MXA-button' >\n                        MXA   \n                    </button> \n\n                    <button id= 'MXT-button' >\n                        MXT   \n                    </button> \n\n                    <button id= 'MYA-button' >\n                        MYA   \n                    </button> \n\n                    <button id= 'MYT-button' >\n                        MYT   \n                    </button> \n\n                    <button id= 'MZA-button' >\n                        MZA   \n                    </button> \n\n                    <button id= 'MZT-button' >\n                        MZT   \n                    </button> \n\n                </div>\n\n        </div>\n    )\n}\n\nconst mapStateToProps = state => {\n    return{\n\n    }\n}\n\nexport default connect(mapStateToProps,)(Cube)","/Users/karirodrigu0/Desktop/RubiksCube/rubcube-app/src/components/CubeDetails.js",["46","47","48","49","50","51"],"import React, { useState } from 'react';\nimport { connect } from 'react-redux'\n\n\n\nconst CubeDetails = () => {\n    const [state, setState] = useState(null)\n    const z1 = '100px'\n    const y1 = '50px'\n    const z2 ='100px'\n    const x2 = '0px'\n    \n    return (\n              \n        <div id='square'style={{ border: \"solid\", borderColor: \"black\", width: \"9rem\", height: \"9rem\", display: \"flex\", flexWrap: \"wrap\" }}>\n            <div style={{ border: \"solid\", borderColor: \"black\", width: \"2.62rem\", height: \"2.62rem\" }}></div>\n            <div style={{ border: \"solid\", borderColor: \"black\", width: \"2.62rem\", height: \"2.62rem\" }}></div>\n            <div style={{ border: \"solid\", borderColor: \"black\", width: \"2.62rem\", height: \"2.62rem\" }}></div>\n            <div style={{ border: \"solid\", borderColor: \"black\", width: \"2.62rem\", height: \"2.62rem\" }}></div>\n            <div style={{ border: \"solid\", borderColor: \"black\", width: \"2.62rem\", height: \"2.62rem\" }}></div>\n            <div style={{ border: \"solid\", borderColor: \"black\", width: \"2.62rem\", height: \"2.62rem\" }}></div>\n            <div style={{ border: \"solid\", borderColor: \"black\", width: \"2.62rem\", height: \"2.62rem\" }}></div>\n            <div style={{ border: \"solid\", borderColor: \"black\", width: \"2.62rem\", height: \"2.62rem\" }}></div>\n            <div style={{ border: \"solid\", borderColor: \"black\", width: \"2.62rem\", height: \"2.62rem\" }}></div>\n\n        </div>\n\n            \n\n       \n    )\n\n\n}\n\nconst mapStateToProps = state => {\n    return {\n\n    }\n}\n\nexport default connect(mapStateToProps)(CubeDetails)",{"ruleId":"52","severity":1,"message":"53","line":1,"column":8,"nodeType":"54","messageId":"55","endLine":1,"endColumn":12},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":null,"fatal":true,"severity":2,"message":"60","line":13,"column":11},{"ruleId":"52","severity":1,"message":"61","line":8,"column":10,"nodeType":"54","messageId":"55","endLine":8,"endColumn":15},{"ruleId":"52","severity":1,"message":"62","line":8,"column":17,"nodeType":"54","messageId":"55","endLine":8,"endColumn":25},{"ruleId":"52","severity":1,"message":"63","line":22,"column":12,"nodeType":"54","messageId":"55","endLine":22,"endColumn":21},{"ruleId":"52","severity":1,"message":"64","line":22,"column":23,"nodeType":"54","messageId":"55","endLine":22,"endColumn":35},{"ruleId":"52","severity":1,"message":"61","line":7,"column":12,"nodeType":"54","messageId":"55","endLine":7,"endColumn":17},{"ruleId":"52","severity":1,"message":"62","line":7,"column":19,"nodeType":"54","messageId":"55","endLine":7,"endColumn":27},{"ruleId":"52","severity":1,"message":"65","line":8,"column":11,"nodeType":"54","messageId":"55","endLine":8,"endColumn":13},{"ruleId":"52","severity":1,"message":"66","line":9,"column":11,"nodeType":"54","messageId":"55","endLine":9,"endColumn":13},{"ruleId":"52","severity":1,"message":"67","line":10,"column":11,"nodeType":"54","messageId":"55","endLine":10,"endColumn":13},{"ruleId":"52","severity":1,"message":"68","line":11,"column":11,"nodeType":"54","messageId":"55","endLine":11,"endColumn":13},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","no-native-reassign",["69"],"no-negated-in-lhs",["70"],"Parsing error: Unexpected token\n\n\u001b[0m \u001b[90m 11 | \u001b[39m  \u001b[36mconst\u001b[39m initialApplicationState \u001b[33m=\u001b[39m {\u001b[0m\n\u001b[0m \u001b[90m 12 | \u001b[39m    isLoading\u001b[33m:\u001b[39m \u001b[36mfalse\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 13 | \u001b[39m    sides \u001b[33m=\u001b[39m \u001b[0m\n\u001b[0m \u001b[90m    | \u001b[39m          \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 14 | \u001b[39m    {sideOne\u001b[33m:\u001b[39m [[]\u001b[33m,\u001b[39m[]\u001b[33m,\u001b[39m[]]\u001b[33m,\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 15 | \u001b[39m      sideTwo\u001b[33m:\u001b[39m [[]\u001b[33m,\u001b[39m[]\u001b[33m,\u001b[39m[]]\u001b[33m,\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 16 | \u001b[39m      sideThree\u001b[33m:\u001b[39m [[]\u001b[33m,\u001b[39m[]\u001b[33m,\u001b[39m[]]\u001b[33m,\u001b[39m\u001b[0m","'state' is assigned a value but never used.","'setState' is assigned a value but never used.","'sideArray' is assigned a value but never used.","'setSideArray' is assigned a value but never used.","'z1' is assigned a value but never used.","'y1' is assigned a value but never used.","'z2' is assigned a value but never used.","'x2' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]